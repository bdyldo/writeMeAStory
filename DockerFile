# Multi-stage Docker build for Story Generator
# Optimized for development, testing, and production deployment

# =============================================================================
# Stage 1: Frontend Build
# =============================================================================
FROM node:20-alpine AS frontend-build

WORKDIR /app/client

# Copy package files first for better Docker layer caching
COPY client/package*.json ./

# Install dependencies
RUN npm ci 

# Copy source code and build
COPY client/ ./
COPY common/ ../common/

# Build the frontend
RUN npm run build

# =============================================================================
# Stage 2: Python Dependencies
# =============================================================================
FROM python:3.12-slim AS python-deps

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==2.0.1

# Copy Poetry configuration
COPY server/pyproject.toml server/poetry.lock ./

# Configure poetry and install dependencies
RUN poetry config virtualenvs.create true \
    && poetry config virtualenvs.in-project true \
    && poetry install --no-root

# =============================================================================
# Stage 3: Model and Tokenizer (for caching)
# =============================================================================
FROM python:3.12-slim AS model-stage

WORKDIR /app

# Copy model files (these change less frequently)
COPY server/app/model/ ./server/app/model/

# =============================================================================
# Stage 4: Test Environment
# =============================================================================
FROM python:3.12-slim AS test

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from python-deps stage
COPY --from=python-deps /app/.venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Install test dependencies
RUN pip install pytest pytest-asyncio pytest-benchmark

# Copy application code
COPY server/ ./server/
COPY --from=model-stage /app/server/app/model/ ./server/app/model/
COPY common/ ./common/

# Run tests
CMD ["python", "-m", "pytest", "server/tests/", "-v"]

# =============================================================================
# Stage 5: Development Environment
# =============================================================================
FROM python:3.12-slim AS development

WORKDIR /app

# Install system dependencies including dev tools
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    vim \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment
COPY --from=python-deps /app/.venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Install additional dev dependencies
RUN pip install pytest pytest-asyncio ipython black isort

# Copy all source code
COPY server/ ./server/
COPY --from=model-stage /app/server/app/model/ ./server/app/model/
COPY --from=frontend-build /app/client/dist ./client/dist
COPY common/ ./common/

# Set environment variables for development
ENV STAGE=DEV
ENV PYTHONPATH=/app
ENV PORT=8000

# Expose port for development
EXPOSE 8000

# Development command with hot reload - use the same approach that works locally
CMD ["python", "-m", "server.app.main"]

# =============================================================================
# Stage 6: Production Environment
# =============================================================================
FROM python:3.12-slim AS production

WORKDIR /app

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r appuser && useradd -r -g appuser appuser

# Copy virtual environment from python-deps stage
COPY --from=python-deps /app/.venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Copy application code
COPY server/ ./server/
COPY --from=model-stage /app/server/app/model/ ./server/app/model/
COPY --from=frontend-build /app/client/dist ./client/dist
COPY common/ ./common/

# Set production environment variables
ENV STAGE=PROD
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PORT=8000

# Change ownership to non-root user
RUN chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Expose port
EXPOSE 8000

# Production command - use the same approach that works locally
CMD ["python", "-m", "server.app.main"]