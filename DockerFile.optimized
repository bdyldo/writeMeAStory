# Production-Only Docker build for Story Generator
# Optimized for deployment: ~500MB image size
# Removes PyTorch/transformers (Modal GPU only) and frontend build complexity

# =============================================================================
# Stage 1: Python Dependencies
# =============================================================================
FROM python:3.12-slim AS python-deps

WORKDIR /app

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==2.0.1

# Copy optimized Poetry configuration (without PyTorch/transformers)
COPY server/pyproject.docker.toml ./pyproject.toml
COPY server/poetry.lock ./poetry.lock

# Configure poetry and install minimal dependencies
RUN poetry config virtualenvs.create true \
    && poetry config virtualenvs.in-project true \
    && poetry lock --no-interaction --no-ansi \
    && poetry install --no-root --no-interaction --no-ansi

# =============================================================================
# Stage 2: Production Environment
# =============================================================================
FROM python:3.12-slim

WORKDIR /app

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r appuser && useradd -r -g appuser appuser

# Copy virtual environment from python-deps stage
COPY --from=python-deps /app/.venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# Copy application code
COPY server/ ./server/
# Copy pre-built frontend dist folder (no build required)
COPY client/dist ./client/dist
COPY common/ ./common/

# Create empty model directory (not needed for Modal-based inference)
RUN mkdir -p ./server/app/model

# Set production environment variables
ENV STAGE=PROD
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PORT=8000
ENV USE_MODAL=true

# Change ownership to non-root user
RUN chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Expose port
EXPOSE 8000

# Production command
CMD ["python", "-m", "server.app.main"]