name: CI/CD Pipeline

on:
  push:
    branches: [ master, feat/* ]
  pull_request:
    branches: [ master ]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      - name: Lint frontend
        run: |
          cd client
          npm run lint

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.0.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: server/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install backend dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd server
          poetry install --no-root

      - name: Format check with Black
        run: |
          cd server
          poetry run black --check .

  # Job 2: Build, Test, and Push
  build-test-push:
    name: Build, Test & Push
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/feat/'))
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Build frontend (produces client/dist)
        run: |
          cd client
          npm ci
          npm run build

      - name: Build production Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./DockerFile.optimized
          target: production
          push: false
          tags: story-generator:test
          load: true

      - name: Test production build
        run: |
          # Create .env file from GitHub secrets
          echo "${{ secrets.DOT_ENV }}" > server/.env
          
          # Test with the built image
          docker compose --profile prod up -d
          
          # Wait for startup
          sleep 15
          
          # Health check
          curl -f http://localhost:8000/api/health || exit 1
          
          # Cleanup
          docker compose --profile prod down

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./DockerFile.optimized
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

  # Job 3: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

  # Job 4: Model Validation 
  validate-model:
    name: ML Model Validation
    runs-on: ubuntu-latest
    needs: build-test-push
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run model benchmarks
        run: |
          docker run --rm \
            -e STAGE=TEST \
            -e USE_MODAL=false \
            ${{ needs.build-test-push.outputs.image }}:latest \
            python -m pytest server/tests/ -v --tb=short

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Model validation passed! Performance metrics are within acceptable range.'
            })

  # Job 5: Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test-push, validate-model]
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": false,
              "serviceId": "${{ secrets.RENDER_SERVICE_ID }}"
            }'

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 60

      - name: Verify deployment
        run: |
          # Health check on production
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-app.onrender.com/api/health)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed - health check returned $response"
            exit 1
          fi

      - name: Notify success
        if: success()
        run: |
          echo "üöÄ Successfully deployed to production!"
          echo "üìä Image: ${{ needs.build-test-push.outputs.image }}@${{ needs.build-test-push.outputs.digest }}"

  # Job 7: Cleanup on failure
  cleanup:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [build-test-push, validate-model, deploy]
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå Pipeline failed! Check the logs above."
          echo "üîÑ Consider rolling back if this was a production deployment."